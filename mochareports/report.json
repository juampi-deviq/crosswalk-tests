{
  "stats": {
    "suites": 9,
    "tests": 35,
    "passes": 27,
    "pending": 6,
    "failures": 2,
    "start": "2020-07-27T16:32:42.337Z",
    "end": "2020-07-27T16:32:42.337Z",
    "duration": 535110,
    "testsRegistered": 35,
    "passPercent": 77.14285714285714,
    "pendingPercent": 17.142857142857142,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1c34ce10-d4c8-42ea-94f0-81b2d4081d0f",
      "title": "",
      "fullFile": "cypress/integration/e2e/cameras.spec.js",
      "file": "cypress/integration/e2e/cameras.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "69cec65c-432c-472a-b542-c30d9e007d3c",
          "title": "Testing cameras on map and video streaming",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Trying to identify the camera icon on map",
              "fullTitle": "Testing cameras on map and video streaming Trying to identify the camera icon on map",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "33564a25-887d-495f-aa9e-f19d1b0d87db",
              "parentUUID": "69cec65c-432c-472a-b542-c30d9e007d3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing video streaming on camera at DevIQ Headquarters",
              "fullTitle": "Testing cameras on map and video streaming Testing video streaming on camera at DevIQ Headquarters",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "15366891-1d16-47de-aebe-cfe798ced456",
              "parentUUID": "69cec65c-432c-472a-b542-c30d9e007d3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "If user has no streaming permissions, then he cannot see camera icons or start video streaming using API",
              "fullTitle": "Testing cameras on map and video streaming If user has no streaming permissions, then he cannot see camera icons or start video streaming using API",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2d94b211-f1d5-4723-827d-9bffcd086bb3",
              "parentUUID": "69cec65c-432c-472a-b542-c30d9e007d3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "33564a25-887d-495f-aa9e-f19d1b0d87db",
            "15366891-1d16-47de-aebe-cfe798ced456",
            "2d94b211-f1d5-4723-827d-9bffcd086bb3"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fdb3dab6-58e2-4fae-8e69-7b57f158b843",
      "title": "",
      "fullFile": "cypress/integration/e2e/energy.spec.js",
      "file": "cypress/integration/e2e/energy.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b995171c-d6ef-49b6-8060-83513a2d3be0",
          "title": "Energy E2E Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "API: Validation of energy values for all lights using all gateways for all user sites - Individual",
              "fullTitle": "Energy E2E Tests API: Validation of energy values for all lights using all gateways for all user sites - Individual",
              "timedOut": null,
              "duration": 25434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = window.localStorage.getItem('access_token');\nvar sites = window.localStorage.getItem('sites').split(',');\nvar _loop = function _loop(i) {\n  cy.request({\n    auth: {\n      bearer: token\n    },\n    url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Synapse/\").concat(sites[i], \"/Lights\")\n  }).then(function (response) {\n    response.body.light_n_controller.lights.forEach(function (light) {\n      var snappadress_light; //required to identify light\n      response.body.light_n_controller.controllers.forEach(function (gw) {\n        if (gw.id == light.controllerId) {\n          snappadress_light = gw.snapaddr;\n        }\n      }); //validation of energy retrieved from light\n      var start_date = Cypress.moment().format('DD-MM-YYYY');\n      cy.request({\n        auth: {\n          bearer: token\n        },\n        url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Synapse/\").concat(sites[i], \"/lightsEnergy\"),\n        failOnStatusCode: false,\n        method: 'POST',\n        body: {\n          lights: [snappadress_light],\n          gateway_id: light.controllerId,\n          begin_date: Cypress.moment().format('YYYY-MM-DD') + 'T00:00:00-03:00',\n          end_date: Cypress.moment(start_date, 'DD-MM-YYYY').add(1, 'days').format('YYYY-MM-DD') + 'T00:00:00-03:00',\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        }\n      }).then(function (response) {\n        expect(response.body.success).to.be.eq(true);\n        expect(response.body.begin_date).to.be.eq(Cypress.moment().format('YYYY-MM-DD') + 'T00:00:00-03:00');\n        expect(response.body.end_date).to.be.eq(Cypress.moment(start_date, 'DD-MM-YYYY').add(1, 'days').format('YYYY-MM-DD') + 'T00:00:00-03:00');\n        expect(response.body.timezone).to.be.eq(Intl.DateTimeFormat().resolvedOptions().timeZone);\n        response.body.energy.dataForThings[0].values.forEach(function (energy_values) {\n          expect(energy_values.timestamp);\n          expect(energy_values.to).to.match(/([20]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/); // 2019-12-03 22:09:39.069084\n          expect(energy_values.from).to.match(/([20]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/);\n          assert.isNumber(energy_values.value, 'ok');\n        });\n      });\n    });\n  });\n};\nfor (var i = 0; i < sites.length; i++) {\n  _loop(i);\n}",
              "err": {},
              "uuid": "76a530a5-4912-4a8a-a2b7-65ab30dc527a",
              "parentUUID": "b995171c-d6ef-49b6-8060-83513a2d3be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API: Validations of requests for energy values for all site lights - Dashboard",
              "fullTitle": "Energy E2E Tests API: Validations of requests for energy values for all site lights - Dashboard",
              "timedOut": null,
              "duration": 2706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = window.localStorage.getItem('access_token');\nvar sites = window.localStorage.getItem('sites').split(',');\nvar _loop2 = function _loop2(i) {\n  cy.request({\n    auth: {\n      bearer: token\n    },\n    url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Synapse/\").concat(sites[i], \"/Lights\")\n  }).then(function (response) {\n    var snapaddress = [];\n    response.body.light_n_controller.controllers.forEach(function (gw) {\n      snapaddress.push(gw.snapaddr);\n    }); //validation of energy retrieved from light\n    var start_date = Cypress.moment().format('DD-MM-YYYY');\n    var site_controller = window.localStorage.getItem(sites[i]);\n    cy.request({\n      auth: {\n        bearer: token\n      },\n      url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Synapse/\").concat(sites[i], \"/lightsEnergy\"),\n      failOnStatusCode: false,\n      method: 'POST',\n      body: {\n        lights: snapaddress,\n        gateway_id: site_controller,\n        //site controller\n        begin_date: Cypress.moment().format('YYYY-MM-DD') + 'T00:00:00-03:00',\n        end_date: Cypress.moment(start_date, 'DD-MM-YYYY').add(1, 'days').format('YYYY-MM-DD') + 'T00:00:00-03:00',\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      }\n    }).then(function (response) {\n      expect(response.body.success).to.be.eq(true); //expect(response.body.begin_date).to.be.eq(Cypress.moment().format('YYYY-MM-DD') + 'T00:00:00-03:00');\n      expect(response.body.end_date).to.be.eq(Cypress.moment(start_date, 'DD-MM-YYYY').add(1, 'days').format('YYYY-MM-DD') + 'T00:00:00-03:00');\n      expect(response.body.timezone).to.be.eq(Intl.DateTimeFormat().resolvedOptions().timeZone);\n      response.body.energy.dataForThings[0].values.forEach(function (energy_values) {\n        expect(energy_values.timestamp);\n        expect(energy_values.to).to.match(/([20]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/); // 2019-12-03 22:09:39.069084\n        expect(energy_values.from).to.match(/([20]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/);\n        expect(energy_values).to.have.property('value');\n        assert.isNumber(energy_values.value, 'ok');\n      });\n    });\n  });\n};\nfor (var i = 0; i < sites.length; i++) {\n  _loop2(i);\n}",
              "err": {},
              "uuid": "276d2823-9964-47a1-9f38-328af8b9f021",
              "parentUUID": "b995171c-d6ef-49b6-8060-83513a2d3be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test of reset energy baseline functionality",
              "fullTitle": "Energy E2E Tests Test of reset energy baseline functionality",
              "timedOut": null,
              "duration": 20166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.server();\ncy.route('POST', '/api/v1/Auth').as('auth');\ncy.visit(Cypress.env('PANGEA_BASE_URL'));\ncy.loginUI(_user.usernameCloud, _user.passwordCloud);\ncy.wait(4000); // Click on SITES\ncy.contains('SITES').click(); // Click on DevIQ\ncy.get('#accordion-sites').contains('DevIQ - Headquarters').click();\ncy.get('#accordion-sites').contains('DevIQ - Remote Site').click();\ncy.wait(1000);\ncy.route('POST', \"/api/v1/Synapse/\".concat(hq_site, \"/lightsEnergy\")) //hardcoded Headquarters\n.as('getEnergy');\ncy.get('.justify-content-md-center.nav-item > .mr-3').contains('Dashboard').click();\ncy.wait('@getEnergy').then(function (xhr) {\n  cy.get('[style=\"margin: 0px; width: inherit; height: inherit;\"] > button.btn').contains('Set Baseline').click({\n    force: true\n  });\n  var newBaseline = 0;\n  cy.get('#energy-setup-modal___BV_modal_body_').as('form_setEB');\n  cy.route('PUT', \"/api/v1/Synapse/\".concat(hq_site, \"/EnergyBaseline/_PUT\")).as('updateEnergy');\n  cy.get('@form_setEB').within(function () {\n    cy.get('input').clear().type(newBaseline);\n    cy.contains('Save').click();\n    cy.wait('@updateEnergy').then(function (xhr) {\n      expect(xhr.responseBody).to.have.property('success').eq(true);\n    });\n  });\n});",
              "err": {},
              "uuid": "9705aec8-9594-436d-badc-fcb051354bcc",
              "parentUUID": "b995171c-d6ef-49b6-8060-83513a2d3be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API: setting sites energy baseline when the user has proper permissions",
              "fullTitle": "Energy E2E Tests API: setting sites energy baseline when the user has proper permissions",
              "timedOut": null,
              "duration": 2139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = window.localStorage.getItem('access_token');\ncy.request({\n  url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Synapse/\").concat(hq_site, \"/EnergyBaseline/_PUT\"),\n  auth: {\n    bearer: token\n  },\n  method: 'PUT',\n  failOnStatusCode: false,\n  //this prevent test to fail if status isn¨t 200\n  body: {\n    gw: \"809e24d8-9a33-4575-a15a-5bf805652895\",\n    gw_lights: [],\n    no_max_output: true,\n    user_set_energy_output: \"0\"\n  }\n}).then(function (response) {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.key(\"success\");\n});",
              "err": {},
              "uuid": "1ed79d24-06b2-43db-a210-3a8cf01cc290",
              "parentUUID": "b995171c-d6ef-49b6-8060-83513a2d3be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing that site Energy Baseline is not settable using UI or API if the user has proper permissions",
              "fullTitle": "Energy E2E Tests Testing that site Energy Baseline is not settable using UI or API if the user has proper permissions",
              "timedOut": null,
              "duration": 15135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var permissions = {\n  \"b1fafb7c-35a9-4235-ae49-bc83d52b13a9\": [\"READ\", \"UPDATE\", \"STREAM\", \"SCHEDULE\"],\n  //neighter have \"EB\n  \"97e9ad06-d70a-4d08-99c0-9b4ebe6f8d89\": [\"READ\", \"UPDATE\", \"SCHEDULE\"]\n};\ncy.updateUserPermissions(permissions).then(function () {\n  cy.server();\n  cy.route('POST', '/api/v1/Auth').as('auth');\n  cy.visit(Cypress.env('PANGEA_BASE_URL'));\n  cy.loginUI(_user.usernameCloud, _user.passwordCloud);\n  cy.wait(4000); // Click on SITES\n  cy.contains('SITES').click(); // Click on DevIQ\n  cy.get('#accordion-sites').contains('DevIQ - Headquarters').click();\n  cy.get('#accordion-sites').contains('DevIQ - Remote Site').click();\n  cy.wait(1000);\n  cy.route('POST', \"/api/v1/Synapse/\".concat(hq_site, \"/lightsEnergy\")) //hardcoded Headquarters\n  .as('getEnergy');\n  cy.get('.justify-content-md-center.nav-item > .mr-3').contains('Dashboard').click();\n  cy.wait('@getEnergy').then(function (xhr) {\n    cy.get('[style=\"margin: 0px; width: inherit; height: inherit;\"] > button.btn').should('not.exist'); //check that the \"Set Baseline\" btn doesnt exist in DOM\n    //test api service\n    var newBaseline = 0;\n    cy.request({\n      url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Synapse/\").concat(hq_site, \"/EnergyBaseline/_PUT\"),\n      method: 'PUT',\n      failOnStatusCode: false,\n      //this prevent test to fail if status isn¨t 200\n      body: {\n        gw: \"809e24d8-9a33-4575-a15a-5bf805652895\",\n        gw_lights: [],\n        user_set_energy_output: newBaseline,\n        no_max_output: true\n      }\n    }).then(function (response) {\n      expect(response.status).to.eq(401);\n      expect(response.body.code).to.contains(\"invalid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "9f4d26a6-d4a8-4bd4-b013-44ecf8042630",
              "parentUUID": "b995171c-d6ef-49b6-8060-83513a2d3be0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate Energy Consumption Graph is reachable and visible",
              "fullTitle": "Energy E2E Tests Validate Energy Consumption Graph is reachable and visible",
              "timedOut": null,
              "duration": 19421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/** Login to Pangea */\ncy.visit(Cypress.env('PANGEA_BASE_URL'));\ncy.loginUI(_user.usernameCloud, _user.passwordCloud);\n/** Click on SITES */\ncy.contains('SITES').click();\ncy.wait(5000);\n/** Click on DevIQ */\ncy.contains('DevIQ').click();\ncy.wait(2000);\n/** Click on first gateway */\ncy.get('div[style*=\"background-image\"]').last().trigger('click', {\n  force: true\n});\n/** Click on Devices button */\ncy.get('button').contains('Devices').click();\n/** Click on first device listed from table */\ncy.server();\ncy.route('POST', '/api/v1/Synapse/97e9ad06-d70a-4d08-99c0-9b4ebe6f8d89/lightsEnergy').as('getEnergy');\ncy.get('tbody>tr').eq(0).click({\n  force: true\n}); //wait for energy data from server...\ncy.wait('@getEnergy').then(function (xhr) {\n  cy.get('#renderedInfoWindow > :nth-child(1)').contains(xhr.responseBody.energy.dataForThings[0].id);\n  /** Click on View Details */\n  cy.get('button').contains('View Details').click();\n  /** Get controller_id text from Light details pop up */\n  cy.get('section[class*=\"ps-container info-scroll-area\"]').find('div');\n  /** Call to GET LightEnergy endpoint for the specific controller_id and light_id saved previously*/\n  /*\n  cy.request({\n      method: 'GET',\n      url: '/api/v1/Gateway/' + gatewayId + '/LightEnergy',\n      qs: {\n          trip: trip,\n          light_id: light_id_text,\n          controller_id: controller_id_text,\n          begin_date: currentDate,\n          end_date: currentDate\n      }\n  }).then(function (response) {\n       // Save the energy data from response\n      energy = response.body.energy\n      expect(response.status).to.eq(200);\n      expect(response.body)\n          .to.have.property('success')\n          .eq(true);\n       cy.get('button')\n          .contains('View Energy')\n          .click();\n       //Validate Energy Consumption Graph in UI against the energy data retrieve from LightEnergy API\n      if (energy.length > 0) {\n          cy.get('.echarts').should('be.visible')\n      } else {\n          cy.get('.echarts').should('not.be.visible')\n      }\n   });*/\n});",
              "err": {},
              "uuid": "716420d8-2356-4d24-8e5a-e573423519c1",
              "parentUUID": "b995171c-d6ef-49b6-8060-83513a2d3be0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76a530a5-4912-4a8a-a2b7-65ab30dc527a",
            "276d2823-9964-47a1-9f38-328af8b9f021",
            "9705aec8-9594-436d-badc-fcb051354bcc",
            "1ed79d24-06b2-43db-a210-3a8cf01cc290",
            "9f4d26a6-d4a8-4bd4-b013-44ecf8042630",
            "716420d8-2356-4d24-8e5a-e573423519c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 85001,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "984092a8-426c-457f-aa25-11f8c1b31148",
      "title": "",
      "fullFile": "cypress/integration/e2e/events.spec.js",
      "file": "cypress/integration/e2e/events.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "956c5116-9d92-495b-a2ef-129150e0f5ff",
          "title": "Testing Event Creation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Event Panel show the right data according to selected site and date",
              "fullTitle": "Testing Event Creation Event Panel show the right data according to selected site and date",
              "timedOut": null,
              "duration": 63766,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(Cypress.moment().format('YYYY-MM-DD'));\ncy.wait('@getEvents').then(function (xhr) {\n  cy.get('.p-1 > :nth-child(3)').contains('Events').click();\n  var events = xhr.responseBody.result.scheduledScenes;\n  var active_events = [];\n  var today = Cypress.moment().format('YYYY-MM-DD').toString();\n  events.forEach(function (event) {\n    expect(event).to.have.property(\"sceneId\");\n    expect(event).to.have.property(\"name\");\n    expect(event).to.have.property(\"start\");\n    expect(event).to.have.property(\"rrule\");\n    expect(event).to.have.property(\"astroTime\");\n    expect(event).to.have.property(\"astroTimeOffset\");\n    var event_day = Cypress.moment(event.start, 'YYYY-MM-DDThh:mm:ss.sssZ').format('YYYY-MM-DD').toString();\n    console.log(\"\".concat(event_day, \" | \").concat(today));\n  });\n});",
              "err": {},
              "uuid": "0681f208-7fd2-4945-91fc-545d4884b129",
              "parentUUID": "956c5116-9d92-495b-a2ef-129150e0f5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Single Event Creation using an existing Scene and posterior event deletion",
              "fullTitle": "Testing Event Creation Single Event Creation using an existing Scene and posterior event deletion",
              "timedOut": null,
              "duration": 25934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var eventName = 'Event Test ' + Cypress.moment().format('DD/MM/YY HH:mm');\nvar hours = Cypress.moment().format('hh');\nvar minutes = Cypress.moment().add(2, 'minutes').format('mm'); // Create event\ncy.get('#arrow-timeline').click();\ncy.get('#timeline-hours').click();\ncy.get('span').contains('One-time event').click();\ncy.get('#event-name').click({\n  force: true\n}).type(eventName).tab().type(hours).tab().type(minutes);\ncy.get('#timepicker-input-ampm').select('pm', {\n  force: true\n});\ncy.get('#btn-next').click(); //Before select scene wee need to ensute that the selected Scene contains just one Site\n// Choose an scene\ncy.get('span').contains('Choose scene').parent().click();\ncy.get('ul[role=\"menu\"]').find('li').contains('Turn Off').click(); // Save the event\ncy.server();\ncy.route('POST', \"api/v1/Synapse/Event\").as('eventPost');\ncy.get('.btn.btn-primary').contains('Save').click();\ncy.wait('@eventPost').then(function (xhr) {\n  var res = xhr.responseBody;\n  expect(res).to.have.property('success').eq(true);\n  var event = res.result[0].scheduleScene;\n  expect(event).to.have.property('id');\n  var event_id = event.id;\n  expect(event).to.have.property('sceneId');\n  expect(event).to.have.property('name');\n  expect(event).to.have.property('start');\n  expect(event).to.have.property('rrule');\n  expect(event).to.have.property('astroTime');\n  expect(event).to.have.property('astroTimeOffset');\n  expect(res).to.have.property('scene').to.have.keys('id', 'name');\n  res.sceneZoneBehaviors.forEach(function (behavior) {\n    expect(behavior).to.have.property('behaviorId');\n    expect(behavior).to.have.property('behaviorParameters');\n    expect(behavior).to.have.property('id');\n    expect(behavior).to.have.property('sceneId').not.to.be.null;\n    expect(behavior).to.have.property('zoneId');\n  });\n  res.siteIds.forEach(function (siteID) {\n    expect(siteID).to.be.eq(Cypress.env(\"DEVIQ_TESTING_SITE\"));\n  });\n}); // Make sure that event is shown on Event table\ncy.get('button').contains('Events').click();\ncy.get('table').should('contain.text', eventName); // Delete the event recently created\ncy.get('table').find('td').contains(eventName).click();\ncy.get('button').contains('Delete').click();\ncy.route('DELETE', 'api/v1/Synapse/**/Event/**/del').as('eventDeletion');\ncy.get('button').contains('Yes, delete it').click();\ncy.wait('@eventDeletion').then(function (xhr) {\n  var response = xhr.responseBody; // Make sure that event is not shown on table anymore\n  cy.get('table').should('not.contain.text', eventName);\n  expect(xhr.status).to.eq(200);\n  expect(response).to.have.property('success').eq(true);\n  expect(response.result.deleteScheduledScene).to.have.property('id').not.to.be.null;\n  expect(response.result.deleteScheduledScene).to.have.property('sceneId').not.to.be.null;\n  expect(response.result.deleteScheduledScene).to.have.property('name');\n  expect(response.result.deleteScheduledScene).to.have.property('start');\n  cy.log('Created Event was successfully deleted');\n});",
              "err": {},
              "uuid": "0d4f4d19-5a82-44d6-be4e-8723e89bfde5",
              "parentUUID": "956c5116-9d92-495b-a2ef-129150e0f5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recurrent Event using astrotime w/ minutes in offset in existing scene - No end date",
              "fullTitle": "Testing Event Creation Recurrent Event using astrotime w/ minutes in offset in existing scene - No end date",
              "timedOut": null,
              "duration": 21429,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var hours = Cypress.moment().format('HH');\nvar eventName = \"Recurring on \".concat(hours); // Create event\ncy.get('#arrow-timeline').click();\nvar day_moment;\nif (hours < 20) {\n  day_moment = 'Dusk';\n} else {\n  //change day event for tomorrow\n  cy.get('[style=\"height: 60px; position: relative; border-bottom: 1px solid rgba(169, 169, 169, 0.35);\"] > :nth-child(1)').click();\n  var day_tomorrow = Cypress.moment().add(1, 'days').format('DD');\n  if (day_tomorrow == Cypress.moment().endOf('month').format('DD')) {\n    cy.get('.next'); //go to the next month\n  }\n  cy.get('.vdp-datepicker__calendar > div').contains(day_tomorrow).click(); //take me to tomorrow ;)\n}\ncy.get('#timeline-hours > :nth-child(24)').click();\ncy.get('span').contains('Recurring event').click();\ncy.contains('User specified').click({\n  force: true\n});\ncy.contains(day_moment).click({\n  force: true\n}); //set timeoffset\nvar minutesOffset = 25;\ncy.get('input[type=\"number\"]').clear({\n  force: true\n}).type(minutesOffset, {\n  force: true\n});\ncy.get('span:nth-child(1) > .icon-arrow-down').click();\ncy.get('.justify-content-between > div:nth-child(2)').click();\ncy.get('.btn:nth-child(2) > span').click();\ncy.get('#btn-next').click();\ncy.get('#dropdown-scene__BV_toggle_').click();\ncy.get('.dropdown-item').contains('Turn Off').click();\ncy.route('POST', '/api/v1/Synapse/Event').as('postEvent');\ncy.get('.btn-primary:nth-child(2)').contains('Save').click();\ncy.wait('@postEvent').then(function (xhr) {\n  cy.wait(1500);\n  console.log(xhr.responseBody.result[0]);\n  cy.get('button').contains('Events').click();\n  cy.get('table').find('td').contains(\"00:25\").parent().find('td').contains(xhr.responseBody.result[0].scheduleScene.astroTime).click(); // Delete the event recently created\n  cy.get('button').contains('Delete').click();\n  cy.get('button').contains('Yes, delete it').click(); // Make sure that event is not shown on table anymore\n  cy.get('table').should('not.contain.text', eventName);\n});",
              "err": {},
              "uuid": "8ba793c5-35c7-4ece-9cc6-781936b4899b",
              "parentUUID": "956c5116-9d92-495b-a2ef-129150e0f5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recurrent Event using astrotime, negative solar offset & specific end date",
              "fullTitle": "Testing Event Creation Recurrent Event using astrotime, negative solar offset & specific end date",
              "timedOut": null,
              "duration": 23327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var hours = Cypress.moment().format('HH');\nvar eventName = \"Recurring on \".concat(hours); // Create event\ncy.get('#arrow-timeline').click();\ncy.wait(1000);\nvar day_moment;\nif (hours < 20) {\n  day_moment = 'Sunset';\n} else {\n  //change day event for tomorrow\n  cy.get('[style=\"height: 60px; position: relative; border-bottom: 1px solid rgba(169, 169, 169, 0.35);\"] > :nth-child(1)').click();\n  var day_tomorrow = Cypress.moment().add(1, 'days').format('DD');\n  if (day_tomorrow == Cypress.moment().endOf('month').format('DD')) {\n    cy.get('.next'); //go to the next month\n  }\n  cy.get('.vdp-datepicker__calendar > div').contains(day_tomorrow).click(); //take me to tomorrow ;)\n}\ncy.get('#timeline-hours > :nth-child(24)').click();\ncy.get('span').contains('Recurring event').click();\ncy.contains('User specified').click({\n  force: true\n});\ncy.contains(day_moment).click({\n  force: true\n}); //set timeoffset\nvar minutesOffset = -30;\ncy.get('input[type=\"number\"]').clear({\n  force: true\n}).type(minutesOffset, {\n  force: true\n}); //select end date\ncy.get('#dropdown-todate__BV_toggle_ > span > .icon-sm').click();\ncy.get('#dropdown-todate > .dropdown-menu > .ps-container > :nth-child(2) > .dropdown-item').contains('Specific End Date').click(); //automatically  the app select the tomorrow date\ncy.get('span:nth-child(1) > .icon-arrow-down').click();\ncy.get('.justify-content-between > div:nth-child(2)').click();\ncy.get('#btn-next').click();\ncy.get('#dropdown-scene__BV_toggle_').click();\ncy.get('.dropdown-item').contains('Turn Off').first().click();\ncy.wait(1500);\ncy.route('POST', '/api/v1/Synapse/Event').as('postEvent');\ncy.get('.btn-primary:nth-child(2)').contains('Save').click();\ncy.wait('@postEvent').then(function (xhr) {\n  //Check if after the end date event is not longer visible\n  // I have some questions for validations here for the PM/TL\n  cy.wait(1500);\n  console.log(xhr.responseBody.result[0]); //Check if event is visible when should be\n  cy.get('button').contains('Events').click();\n  cy.get('table').find('td').contains(\"-00:30\").parent().find('td').contains(xhr.responseBody.result[0].scheduleScene.astroTime).click(); // Delete the event recently created\n  cy.get('button').contains('Delete').click();\n  cy.get('button').contains('Yes, delete it').click(); // Make sure that event is not shown on table anymore\n  cy.get('table').should('not.contain.text', eventName);\n});",
              "err": {},
              "uuid": "bffb6a06-10f1-4710-ae28-a954b6627006",
              "parentUUID": "956c5116-9d92-495b-a2ef-129150e0f5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Event creation via UI or API doesnt work if user has no permissions",
              "fullTitle": "Testing Event Creation Event creation via UI or API doesnt work if user has no permissions",
              "timedOut": null,
              "duration": 19651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var permissions = {\n  \"b1fafb7c-35a9-4235-ae49-bc83d52b13a9\": [\"READ\", \"UPDATE\"],\n  \"97e9ad06-d70a-4d08-99c0-9b4ebe6f8d89\": [\"READ\", \"UPDATE\"]\n};\ncy.updateUserPermissions(permissions).then(function () {\n  cy.visit(Cypress.env('PANGEA_BASE_URL'));\n  cy.server();\n  cy.route('POST', '/api/v1/Auth').as('auth');\n  cy.loginUI(_user.usernameCloud, _user.passwordCloud);\n  cy.wait('@auth').then(function (xhr) {\n    cy.get('#arrow-timeline').click();\n    cy.wait(1000);\n    cy.get('#timeline-hours > :nth-child(24)').click();\n    cy.get('span').contains('One-time event').should('not.exist'); //Validate that EventCreation popup is not visible\n    cy.log('Testing API access without permissions now...');\n    var token = xhr.responseBody.access_token;\n    var start_date = Cypress.moment().format('YYYY-MM-DDThh:mm:ssZ');\n    console.log(start_date);\n    cy.request({\n      url: \"api/v1/Synapse/Event\",\n      auth: {\n        bearer: token\n      },\n      method: 'POST',\n      body: {\n        siteIds: [Cypress.env(\"DEVIQ_TESTING_SITE\")],\n        //DevIQ HQ\n        schedule: {\n          name: \"Automated event for\",\n          start: start_date,\n          rrule: null,\n          astroTime: null,\n          astroTimeOffset: null\n        },\n        scene: {\n          id: '77587eb8-eecf-43b6-a069-8641fed926c6',\n          name: 'Turn Off',\n          gw: '809e24d8-9a33-4575-a15a-5bf805652895',\n          new: false,\n          scene_zone_behavior: [{\n            id: '22d992ef937d4367969787c7ea783a2d',\n            behavior_id: 'Off',\n            behavior_parameters: null,\n            zone_id: 'id_builtin_zone_all',\n            gw: '809e24d8-9a33-4575-a15a-5bf805652895'\n          }]\n        }\n      },\n      failOnStatusCode: false\n    }).then(function (res) {\n      expect(res.status).to.eq(401);\n      expect(res.body.code).to.contains(\"invalid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "4dca3588-b710-4422-b669-24aa2c15182f",
              "parentUUID": "956c5116-9d92-495b-a2ef-129150e0f5ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0681f208-7fd2-4945-91fc-545d4884b129",
            "0d4f4d19-5a82-44d6-be4e-8723e89bfde5",
            "8ba793c5-35c7-4ece-9cc6-781936b4899b",
            "bffb6a06-10f1-4710-ae28-a954b6627006",
            "4dca3588-b710-4422-b669-24aa2c15182f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 154107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ade1cd84-724e-4a5a-b728-5cb2dbf92439",
      "title": "",
      "fullFile": "cypress/integration/e2e/lights.spec.js",
      "file": "cypress/integration/e2e/lights.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "840fe6e8-75b2-46bf-b846-3918b307e04e",
          "title": "Lights E2E Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "API: Get all lights data from endpoint and store intensity levels temporary",
              "fullTitle": "Lights E2E Tests API: Get all lights data from endpoint and store intensity levels temporary",
              "timedOut": null,
              "duration": 61057,
              "state": "passed",
              "speed": null,
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login_n_getLights(_user.usernameCloud, _user.passwordCloud).then(function () {\n  var token = window.localStorage.getItem('access_token');\n  var sites = window.localStorage.getItem('sites').split(',');\n  for (var i = 0; i < sites.length; i++) {\n    cy.request({\n      auth: {\n        bearer: token\n      },\n      url: \"api/v1/Synapse/\".concat(sites[i], \"/Lights\"),\n      timeout: 80000,\n      retryOnNetworkFailure: true\n    }).then(function (response) {\n      expect(response.status).to.eq(200);\n      expect(response.body).to.have.property('success').eq(true);\n      expect(response.body.light_n_controller).to.have.property('controllers');\n      var lights = response.body.light_n_controller.lights;\n      var lightZones = response.body.light_n_controller.lightZones;\n      var controllers = response.body.light_n_controller.controllers;\n      var lat, lng;\n      lights.forEach(function (light) {\n        expect(light).to.have.property('id');\n        expect(light).to.have.property('level');\n        assert.isNumber(light.level, 'light level is numeric');\n        expect(light.level).to.satisfy(function (light_level) {\n          return light_level >= 0;\n        });\n        expect(light).to.have.property('name');\n        expect(light).to.have.property('controllerId').to.be.not.null;\n        expect(light).to.have.property('geoLocation').to.have.any.keys('latitude', 'longitude');\n        lat = light.geoLocation.latitude;\n        lng = light.geoLocation.longitude;\n        expect(lat).to.match(/^(\\-?\\d+(\\.\\d+)?)$/);\n        expect(lng).to.match(/^(\\-?\\d+(\\.\\d+)?)$/);\n      });\n      lightZones.forEach(function (lightZone) {\n        expect(lightZone).to.have.property('id').not.to.be.null;\n        expect(lightZone).to.have.property('zoneId').not.to.be.null;\n        expect(lightZone).to.have.property('lightId').not.to.be.null;\n      });\n      controllers.forEach(function (controller) {\n        expect(controller).to.have.property('id').not.to.be.null;\n        expect(controller).to.have.property('name').not.to.be.null;\n        expect(controller).to.have.property('snapaddr').not.to.be.null;\n        expect(controller).to.have.property('type').not.to.be.null;\n        if (controller.x != lng || controller.y != lat) {\n          console.log('Diff Location comparing light against controller possition🚧');\n          cy.log(\" \\uD83D\\uDD36 Longitude is different comparing light against controller location on controller of \".concat(controller.name));\n        } //TODO: check why this is failing for Visionaire (controller has no \"x\" and \"y\" keys)\n        //expect(controller).to.have.property(\"x\").to.match(/^(\\-?\\d+(\\.\\d+)?)$/);// validate march against light location\n        //expect(controller).to.have.property(\"y\").to.match(/^(\\-?\\d+(\\.\\d+)?)$/);\n      });\n    });\n  }\n});",
              "err": {},
              "uuid": "914bf534-38e6-4e52-bc44-7956b2fdb187",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API: Update any individual Light to 50%",
              "fullTitle": "Lights E2E Tests API: Update any individual Light to 50%",
              "timedOut": null,
              "duration": 55888,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login_n_getLights(_user.usernameCloud, _user.passwordCloud).then(function () {\n  var token = window.localStorage.getItem('access_token');\n  var lights = JSON.parse(window.localStorage.getItem('lights')); //cy.clearLocalStorageSnapshot()\n  console.log(lights);\n  var newLevel = 50;\n  var light = lights.find(function (light) {\n    return light.name.includes('Test');\n  }); // finding a light for testing purposes: normally the obtained light should be \"Alarm Test Light\"\n  var originalLevel = light.level;\n  console.log(\"Were going to update level of light \\\"\".concat(light.name, \"\\\" on site \").concat(light.site_id));\n  cy.request({\n    auth: {\n      bearer: token\n    },\n    method: 'POST',\n    url: \"api/v1/Synapse/\".concat(light.site_id, \"/Light/\").concat(light.id, \"/update\"),\n    body: {\n      level: newLevel\n    }\n  }).then(function (response) {\n    expect(response.status).to.eq(200);\n    expect(response.body.result.object).to.have.property('level').eq(newLevel);\n    cy.wait(20000); //Minimum time to await before validation of bright change - giving the application time to commit DB changes after POST success\n    cy.request({\n      method: 'GET',\n      url: \"api/v1/Synapse/\".concat(light.site_id, \"/Lights\"),\n      auth: {\n        bearer: token\n      }\n    }).then(function (response) {\n      var updated_light = response.body.light_n_controller.lights.find(function (element) {\n        return element.id == light.id;\n      });\n      console.log('light updated');\n      console.log(updated_light);\n      console.log('the level before update was: ' + originalLevel);\n      console.log('the level after update is ' + updated_light.level); // restoring light bright to previous value\n      cy.request({\n        auth: {\n          bearer: token\n        },\n        method: 'POST',\n        url: \"api/v1/Synapse/\".concat(light.site_id, \"/Light/\").concat(light.id, \"/update\"),\n        body: {\n          level: originalLevel\n        }\n      }).then(function (response) {\n        cy.wait(20000); //Minimum time to await before validation of bright change - giving the application time to commit DB changes after POST success\n        cy.request({\n          method: 'GET',\n          url: \"api/v1/Synapse/\".concat(light.site_id, \"/Lights\"),\n          auth: {\n            bearer: token\n          },\n          timeout: 80000\n        }).then(function (response) {\n          var updated_light = response.body.light_n_controller.lights.find(function (element) {\n            return element.id == light.id;\n          });\n          console.log('light restored');\n          console.log(updated_light);\n          console.log('target light bright was restored to ' + updated_light.level);\n          expect(updated_light.level).eq(originalLevel);\n          cy.log(\"target light was restored to his original level: \".concat(originalLevel, \"%\"));\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "1940fba6-88b3-41dc-bc62-91bc9fd697bc",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to update lights intensity massively by selecting entire sites zone",
              "fullTitle": "Lights E2E Tests User is able to update lights intensity massively by selecting entire sites zone",
              "timedOut": null,
              "duration": 11798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var headquarters = cy.get('li').contains(\"DevIQ - Headquarters\");\nconsole.log(headquarters);\ncy.get('.gray').click();\ncy.get('.vue-slider-dot').click();\ncy.get('.btn-primary').click();\ncy.get('.gray').click();\ncy.get('.btn:nth-child(1) > span');\ncy.get('#radio__BV_option_0_') //OFF option of radio btn\n.click({\n  force: true\n});\nvar site_remote = '97e9ad06-d70a-4d08-99c0-9b4ebe6f8d89';\nvar site_hq = 'b1fafb7c-35a9-4235-ae49-bc83d52b13a9';\ncy.server();\ncy.route('POST', \"/api/v1/Synapse/\".concat(site_hq, \"/Zone/update\")).as('zoneUpdate'); //Headquarters\ncy.get('.btn-primary').click({\n  force: true\n});\ncy.wait('@zoneUpdate').should(function (xhr) {\n  expect(xhr.status, 'Zone/update POST successful').to.equal(200);\n  expect(xhr.response.body.result.applyBehaviorToZone.behaviorParameters).to.contains('0');\n  console.log(xhr.response.body.result);\n});",
              "err": {},
              "uuid": "ae5a3f1f-c9be-415a-b631-4486935c2bcc",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Be able to see light pop-up with status by clicking on a single light",
              "fullTitle": "Lights E2E Tests Be able to see light pop-up with status by clicking on a single light",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d2379aad-45ab-46bb-9b7f-b5ab83509ef6",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "See device details by finding light on map from Devices Panel",
              "fullTitle": "Lights E2E Tests See device details by finding light on map from Devices Panel",
              "timedOut": null,
              "duration": 10670,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Click on first gateway\ncy.get('div[style*=\"background-image\"]').first().trigger('click', {\n  force: true\n}); // Click on Devices button\ncy.get('button').contains('Devices').click(); //Click on first device listed from table\ncy.get('tbody>tr').eq(0).click({\n  force: true\n}); //Click on View Details\ncy.get('button').contains('View Details').click(); // Validate that View Details pop up is visible\ncy.get('#light-modal___BV_modal_body_').should('be.visible'); // Assert that controller_id is not null\n/*\ncy.get('section[class*=\"ps-container info-scroll-area\"]')\n.find('div')\n.contains('controller_id').find('b')\n.invoke('text')\n.then(function(controller_id_text) {\n  assert.isNotNull(\n    controller_id_text,\n    'controller_id should not be null'\n  );\n  cy.log(\"✅ controller_id is visible on light pop-up\")\n});*/\n// Assert that light_id_text is not null\n/*\ncy.get('section[class*=\"ps-container info-scroll-area\"]')\n.find('div')\n  .contains('id') //.contains(new RegExp(`^(${'id'})`, 'g'))\n    .find('b')\n      .invoke('text')\n        .then(function(light_id_text) {\n          assert.isNotNull(light_id_text, 'light_id should not be null');\n        });\n        cy.log(\"✅ light_id is visible on light pop-up\")\n  */",
              "err": {},
              "uuid": "1039d78c-d5ea-4bf6-b2d3-c4a81f86c7fe",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User cant update zone light intensity using the UI or the API if hasn't proper permissions to do it",
              "fullTitle": "Lights E2E Tests User cant update zone light intensity using the UI or the API if hasn't proper permissions to do it",
              "timedOut": null,
              "duration": 21149,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var permissions = {\n  \"b1fafb7c-35a9-4235-ae49-bc83d52b13a9\": [\"READ\", \"STREAM\", \"SCHEDULE\"],\n  //removing \"UPDATE\"\n  \"97e9ad06-d70a-4d08-99c0-9b4ebe6f8d89\": [\"READ\", \"SCHEDULE\"]\n};\ncy.updateUserPermissions(permissions).then(function () {\n  /** Login to Pangea */\n  cy.visit(Cypress.env('PANGEA_BASE_URL'));\n  cy.server();\n  cy.route('POST', '/api/v1/Auth').as('auth');\n  cy.loginUI(_user.usernameCloud, _user.passwordCloud);\n  cy.wait('@auth').then(function (xhr) {\n    cy.wait(5000);\n    cy.get('.gray').click(); //TODO: were showing the popup for editing an entire zone, Ill continue validations after this popup being removed\n    //cy.get('.vue-slider-dot').should('not.exist');  //isue un the app\n    var site_hq = 'b1fafb7c-35a9-4235-ae49-bc83d52b13a9';\n    var token = xhr.responseBody.access_token;\n    /*cy.route('POST', `/api/v1/Synapse/${site_hq}/Zone/update`).as('zoneUpdate'); //Headquarters\n    cy.get('.btn-primary').click({force:true});*/\n    var newLevel = 50;\n    cy.request({\n      url: \"api/v1/Synapse/\".concat(site_hq, \"/Zone/update\"),\n      method: 'POST',\n      auth: {\n        bearer: token\n      },\n      failOnStatusCode: false,\n      body: {\n        siteId: site_hq,\n        zoneId: \"id_builtin_zone_all\",\n        behaviorId: \"Dimmer\",\n        behaviorParameters: {\n          \"level\": newLevel\n        }\n      }\n    }).then(function (response) {\n      expect(response.status).to.eq(401);\n      expect(response.body.code).to.contains(\"invalid\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click",
                "estack": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click\n    at mouseAction (http://test.pangea.deviq.io/__cypress/runner/cypress_runner.js:150774:17)\n    at Context.click (http://test.pangea.deviq.io/__cypress/runner/cypress_runner.js:150918:14)\n    at Context.<anonymous> (http://test.pangea.deviq.io/__cypress/runner/cypress_runner.js:167681:21)\nFrom Your Spec Code:\n    at Context.eval (http://test.pangea.deviq.io/__cypress/tests?p=cypress/integration/e2e/lights.spec.js:319:25)",
                "diff": null
              },
              "uuid": "c5c1bd82-39ad-4e38-a8bb-458d8921d5ad",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API: User cant update an individual light without proper permissions",
              "fullTitle": "Lights E2E Tests API: User cant update an individual light without proper permissions",
              "timedOut": null,
              "duration": 14807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var permissions = {\n  \"b1fafb7c-35a9-4235-ae49-bc83d52b13a9\": [\"READ\"],\n  //removing \"UPDATE\"\n  \"97e9ad06-d70a-4d08-99c0-9b4ebe6f8d89\": [\"READ\"]\n};\ncy.updateUserPermissions(permissions).then(function () {\n  cy.login_n_getLights(_user.usernameCloud, _user.passwordCloud).then(function () {\n    var token = window.localStorage.getItem('access_token');\n    var lights = JSON.parse(window.localStorage.getItem('lights'));\n    console.log(lights);\n    var newLevel = 50;\n    var light = lights.find(function (light) {\n      return light.name.includes('Test');\n    }); // finding a light for testing purposes: normally the obtained light should be \"Alarm Test Light\"\n    cy.request({\n      auth: {\n        bearer: token\n      },\n      method: 'POST',\n      url: \"api/v1/Synapse/\".concat(light.site_id, \"/Light/\").concat(light.id, \"/update\"),\n      body: {\n        level: newLevel\n      },\n      failOnStatusCode: false\n    }).then(function (response) {\n      expect(response.status).to.eq(401);\n      expect(response.body.code).to.contains(\"invalid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "3399ab4f-1465-4ddc-b3bc-fd615ff8df4a",
              "parentUUID": "840fe6e8-75b2-46bf-b846-3918b307e04e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "914bf534-38e6-4e52-bc44-7956b2fdb187",
            "1940fba6-88b3-41dc-bc62-91bc9fd697bc",
            "ae5a3f1f-c9be-415a-b631-4486935c2bcc",
            "1039d78c-d5ea-4bf6-b2d3-c4a81f86c7fe",
            "3399ab4f-1465-4ddc-b3bc-fd615ff8df4a"
          ],
          "failures": [
            "c5c1bd82-39ad-4e38-a8bb-458d8921d5ad"
          ],
          "pending": [
            "d2379aad-45ab-46bb-9b7f-b5ab83509ef6"
          ],
          "skipped": [],
          "duration": 175369,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e7a4c810-42bc-4455-b82f-217035b42ff2",
      "title": "",
      "fullFile": "cypress/integration/e2e/login.spec.js",
      "file": "cypress/integration/e2e/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3fc5e316-37df-4efe-93c7-bdc100ab865f",
          "title": "Log-in and Sign-out tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate login endpoint with Cloud User testing@deviq.io",
              "fullTitle": "Log-in and Sign-out tests Validate login endpoint with Cloud User testing@deviq.io",
              "timedOut": null,
              "duration": 2292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(_user.usernameCloud);\ncy.request({\n  method: 'POST',\n  url: \"\".concat(Cypress.env(\"PANGEA_BASE_URL\"), \"/api/v1/Auth\"),\n  body: {\n    email: _user.usernameCloud,\n    password: _user.passwordCloud,\n    client_id: 'admin',\n    grant_type: 'password'\n  }\n}).then(function (response) {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('success').eq(true);\n  expect(response.body).to.have.property('oldSSRA').eq(false);\n  if (!response.body.sites.empty) {\n    console.log('iterating sites.....');\n    var sites = response.body.sites;\n    sites.forEach(function (site) {\n      console.log(site);\n      expect(site).to.have.property('name').to.be.not.null;\n      expect(site).to.have.property('id').to.be.not.null;\n      expect(site).to.have.property('siteControllers').to.be.not.empty;\n    });\n  }\n  if (!response.body.profile.empty) {\n    expect(response.body.profile).to.have.property('email').to.contains('@');\n    expect(response.body.profile).to.have.property('role').to.be.not.empty;\n    expect(response.body.profile).to.have.property('lastLogin');\n    expect(response.body.profile).to.have.property('name').to.be.not.empty;\n  }\n  expect(response.body.theme).to.have.property('id').to.be.not.null;\n  expect(response.body.theme).to.have.property('logo').to.be.not.empty;\n  expect(response.body.theme).to.have.property('nm').to.be.not.null;\n});",
              "err": {},
              "uuid": "ce6c31e1-abea-4e3d-adbf-de22b2db082e",
              "parentUUID": "3fc5e316-37df-4efe-93c7-bdc100ab865f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User Sign-In and Sign-Out",
              "fullTitle": "Log-in and Sign-out tests User Sign-In and Sign-Out",
              "timedOut": null,
              "duration": 9490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.server(); // Login to Pangea\ncy.visit(Cypress.env('PANGEA_BASE_URL'));\ncy.route('POST', '/api/v1/Auth').as('auth');\ncy.loginUI(_user.usernameCloud, _user.passwordCloud);\ncy.wait('@auth').then(function (xhr) {\n  expect(xhr.status).eq(200);\n  cy.url().should('eq', 'http://test.pangea.deviq.io/#/lights');\n  expect(xhr.responseBody.access_token).not.to.be.null;\n  expect(xhr.responseBody.oldSSRA).not.to.be.null;\n  expect(xhr.responseBody.org).not.to.be.null;\n  expect(xhr.responseBody).to.have.property('permissions');\n  var permissions = xhr.responseBody.permissions;\n  permissions.forEach(function (permission) {\n    expect(permission.site).not.to.be.null;\n    expect(permission.perm).not.to.be.null;\n  });\n  expect(xhr.responseBody.profile).to.contains.keys(['email', 'lastLogin', 'name', 'role']);\n  expect(xhr.responseBody).to.have.property('sites');\n  expect(xhr.responseBody).to.have.property('theme').keys(['id', 'nm', 'logo']);\n  expect(xhr.responseBody).to.have.property('userId');\n  cy.get('.app-header').contains(\"Logout\").click();\n  expect(cy.url().should('eq', Cypress.env('PANGEA_BASE_URL') + '/#/login'));\n});",
              "err": {},
              "uuid": "5c6d37f7-7e2b-4625-99f4-4eeb383801aa",
              "parentUUID": "3fc5e316-37df-4efe-93c7-bdc100ab865f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User try to Login into the app with bad credentials, user gets an explicit message",
              "fullTitle": "Log-in and Sign-out tests User try to Login into the app with bad credentials, user gets an explicit message",
              "timedOut": null,
              "duration": 2128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.server();\ncy.visit(Cypress.env('PANGEA_BASE_URL'));\ncy.route('POST', '/api/v1/Auth').as('auth');\ncy.loginUI(_user.usernameCloud, \"badPassword\"); //bad password\ncy.wait('@auth').then(function (xhr) {\n  //Popup Message should be displayed\n  cy.get('.swal2-popup').should('contain', \"Invalid Credentials\");\n  console.log(xhr.responseBody);\n  expect(xhr.status).eq(401);\n  expect(xhr.responseBody.code).to.be.eq('invalid_client');\n});",
              "err": {},
              "uuid": "c6f42d03-bbec-4e74-86bb-5d9d668a9795",
              "parentUUID": "3fc5e316-37df-4efe-93c7-bdc100ab865f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce6c31e1-abea-4e3d-adbf-de22b2db082e",
            "5c6d37f7-7e2b-4625-99f4-4eeb383801aa",
            "c6f42d03-bbec-4e74-86bb-5d9d668a9795"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13910,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ac1c3efe-c13f-4fc5-b632-cec4de6406fe",
      "title": "",
      "fullFile": "cypress/integration/e2e/sites.spec.js",
      "file": "cypress/integration/e2e/sites.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e6b57a6a-29a5-4d14-877c-70f7dcc482b5",
          "title": "UI changes according to selected sites and users timezones",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valdidate that when user selects sites from other diff timezone the timeline displays his current location time",
              "fullTitle": "UI changes according to selected sites and users timezones valdidate that when user selects sites from other diff timezone the timeline displays his current location time",
              "timedOut": null,
              "duration": 14714,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('PANGEA_BASE_URL'));\ncy.server();\ncy.route('POST', '/api/v1/Auth').as('auth');\ncy.loginUI(_user.usernameAdmin, _user.passwordAdmin);\ncy.wait('@auth').then(function (xhr) {\n  cy.wait(3000);\n  cy.contains('SITES').click();\n  cy.get('#accordion-sites').contains('DevIQ - Headquarters').then(function (headquarters_option) {\n    var eye_icon = headquarters_option.parent().find('.icon-xs');\n    var hqsite_id = 'b1fafb7c-35a9-4235-ae49-bc83d52b13a9'; //DevIQ - Headquarters\n    cy.route('GET', \"/api/v1/Synapse/\".concat(hqsite_id, \"/Events?start=**\")).as('getEvents');\n    console.log(eye_icon);\n    console.log(eye_icon[0].attributes.style.value);\n    if (eye_icon[0].attributes.style.value.includes('opacity: 0.2')) {\n      //if remote site is disabled\n      console.log(\"Headquarters was disable at the begining\");\n      headquarters_option.click();\n    } //disable Remote Site\n    //cy.get('#accordion-sites').contains('DevIQ - Remote Site').click()\n\n    cy.get('#accordion-sites').contains('Visionaire').click();\n    cy.wait(1500); //Before enable VIS site, do the validations here:\n    cy.get('#arrow-timeline').click();\n    cy.get('[style=\"height: 60px; position: relative; border-bottom: 1px solid rgba(169, 169, 169, 0.35);\"] > :nth-child(3) > .w').as('ctime_label');\n    cy.get('@ctime_label').invoke('text').then(function (txt) {\n      console.log(txt);\n    }); //1- conseguir el texto que tiene este div\n    cy.get('@ctime_label').invoke('text').then(function (txt) {\n      expect(txt).to.contains(moment().tz(\"America/Denver\").format('hh:mm a z') || moment().tz(\"America/Denver\").add(1, 'm').format('hh:mm a z'));\n    }); //2- validar que contenga la hora actual en denver en MDT\n    //Selecting Visionaire\n    cy.get('#accordion-sites').contains('Visionaire - Main').then(function (visionaire_option) {\n      var eye_icon = visionaire_option.parent().find('.icon-xs');\n      var visSite_id = '8d31c63f-3592-43f2-97c8-cb0e2d3ae5e2'; //DevIQ - Headquarters\n      cy.route('GET', \"/api/v1/Synapse/\".concat(visSite_id, \"/Events?start=**\")).as('getEvents');\n      console.log(eye_icon);\n      console.log(eye_icon[0].attributes.style.value);\n      if (eye_icon[0].attributes.style.value.includes('opacity: 0.2')) {\n        //if remote site is disabled\n        console.log(\"VIS Site was disable at the begining\");\n        visionaire_option.click();\n      }\n      cy.wait(1500);\n      cy.get('[style=\"height: 60px; position: relative; border-bottom: 1px solid rgba(169, 169, 169, 0.35);\"] > :nth-child(3) > .w').as('ctime_afterChange');\n      cy.get('@ctime_afterChange').invoke('text').then(function (txt) {\n        expect(txt).to.contain(moment().tz(moment.tz.guess()).format('hh:mm a z') || moment().tz(moment.tz.guess()).add(1, 'm').format('hh:mm a z'));\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "f68e0456-e471-474e-a94e-517415bf451e",
              "parentUUID": "e6b57a6a-29a5-4d14-877c-70f7dcc482b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "timeline should display always gateways time if all selected sites share the same timezone",
              "fullTitle": "UI changes according to selected sites and users timezones timeline should display always gateways time if all selected sites share the same timezone",
              "timedOut": null,
              "duration": 7838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('PANGEA_BASE_URL'));\nvar vis_timezone;\nvar visSite_id = '8d31c63f-3592-43f2-97c8-cb0e2d3ae5e2'; //Visionaire site_id\ncy.server();\ncy.route('POST', '/api/v1/Auth').as('auth');\ncy.route('GET', \"/api/v1/Synapse/\".concat(visSite_id, \"/Settings\")).as('getVisSettings');\ncy.loginUI(_user.usernameAdmin, _user.passwordAdmin);\ncy.wait('@auth').then(function (xhr) {\n  cy.wait(3000);\n  cy.wait('@getVisSettings').then(function (xhr) {\n    vis_timezone = xhr.responseBody.settings.timezone;\n  });\n  cy.contains('SITES').click(); //Selecting Visionaire\n  cy.get('#accordion-sites').contains('Visionaire - Main').then(function (visionaire_option) {\n    var eye_icon = visionaire_option.parent().find('.icon-xs');\n    cy.route('GET', \"/api/v1/Synapse/\".concat(visSite_id, \"/Events?start=****\")).as('getSettings');\n    if (eye_icon[0].attributes.style.value.includes('opacity: 0.2')) {\n      //if remote site is disabled\n      console.log(\"VIS Site was disable at the begining\");\n      visionaire_option.click();\n      cy.wait(500); //cy.get('#accordion-sites').contains('DevIQ - Remote Site').click()\n      cy.get('#accordion-sites').contains('Visionaire').click();\n    }\n    cy.get('#arrow-timeline').click();\n    cy.get('[style=\"height: 60px; position: relative; border-bottom: 1px solid rgba(169, 169, 169, 0.35);\"] > :nth-child(3) > .w').as('ctime_label');\n    cy.get('@ctime_label').invoke('text').then(function (txt) {\n      expect(txt).to.contain(moment().tz(vis_timezone).format('hh:mm a z') || moment().tz().add(1, 'm').format('hh:mm a z'));\n    });\n  });\n});",
              "err": {},
              "uuid": "1e39d390-9a34-4c14-b910-14ad692b891d",
              "parentUUID": "e6b57a6a-29a5-4d14-877c-70f7dcc482b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Compare alarms for SimplySnap against alarms retrieved in Pangea",
              "fullTitle": "UI changes according to selected sites and users timezones Compare alarms for SimplySnap against alarms retrieved in Pangea",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8f29686d-e764-44db-b156-11225de8974b",
              "parentUUID": "e6b57a6a-29a5-4d14-877c-70f7dcc482b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f68e0456-e471-474e-a94e-517415bf451e",
            "1e39d390-9a34-4c14-b910-14ad692b891d"
          ],
          "failures": [],
          "pending": [
            "8f29686d-e764-44db-b156-11225de8974b"
          ],
          "skipped": [],
          "duration": 22552,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "abe3e0bc-5d3a-41de-8701-9815b539f7cb",
      "title": "",
      "fullFile": "cypress/integration/e2e/users.spec.js",
      "file": "cypress/integration/e2e/users.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8267237e-003a-44b5-b14a-d3cd59b12a3f",
          "title": "Testing Users CRUD",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Users are properly filled on table",
              "fullTitle": "Testing Users CRUD Users are properly filled on table",
              "timedOut": null,
              "duration": 12950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('PANGEA_BASE_URL')); //login form\ncy.loginUI(_user.usernameAdmin, _user.passwordAdmin);\ncy.server();\ncy.route('GET', \"http://test.pangea.deviq.io/api/v1/User\").as('getUsers');\ncy.goToAdminPanel();\ncy.wait('@getUsers').then(function (xhr) {\n  console.log(xhr.responseBody);\n  expect(xhr.responseBody).to.have.property('success').eq(true);\n  cy.get('table').find('tr').should('have.length', xhr.responseBody.users.length + 1); //+1 for\n});",
              "err": {},
              "uuid": "8fb2a44b-cde7-43b2-bb8a-15e797893306",
              "parentUUID": "8267237e-003a-44b5-b14a-d3cd59b12a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing User Creation",
              "fullTitle": "Testing Users CRUD Testing User Creation",
              "timedOut": null,
              "duration": 17373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.viewport(1820, 968); // Login to Pangea Admin\ncy.visit(Cypress.env('PANGEA_BASE_URL')); //login form\ncy.loginUI(_user.usernameAdmin, _user.passwordAdmin);\ncy.goToAdminPanel();\ncy.contains('button', 'Add new user').click({\n  force: true\n}); // Enter email\ncy.get('#input-live').type(email, {\n  force: true\n});\ncy.get('span').contains('Choose Organization').click({\n  force: true\n});\ncy.get('ul[role=\"menu\"]').contains('deviq').click({\n  force: true\n}); // Select a theme\ncy.get('ul[role=\"menu\"]').find('li').contains('deviq').click({\n  force: true\n}); //Select Permissions\ncy.get('span').contains('Modify Permissions').click({\n  force: true\n});\ncy.get('#dropdown-permissions').click({\n  force: true\n});\ncy.contains('Device Control').click({\n  force: true\n});\ncy.contains('Scheduling').click({\n  force: true\n}); //Select Sites\ncy.get('span').contains('Select Sites').click({\n  force: true\n});\ncy.contains('Headquarters').click({\n  force: true\n});\ncy.contains('Remote Site').click({\n  force: true\n}); // Make sure that email recently added is shown correctly on emails table\ncy.server();\ncy.route('POST', 'api/v1/User').as('postUser');\ncy.route('GET', 'api/v1/User').as('getUsers'); // Click on \"Save\" button\ncy.get('button[title=\"add new user\"]').click({\n  force: true\n});\ncy.wait('@postUser').then(function (xhr) {\n  cy.wait(2000);\n  var res = xhr.responseBody;\n  expect(xhr.status).to.eq(200);\n  expect(res).to.have.property('success').eq(true);\n  cy.wait('@getUsers').then(function (xhr) {\n    expect(xhr.status).to.eq(200);\n    expect(xhr.responseBody).to.have.property('users');\n    cy.contains(email).parent().parent().contains(setedTheme);\n  });\n});",
              "err": {},
              "uuid": "14de89ff-8888-4b4e-999c-c66f74304812",
              "parentUUID": "8267237e-003a-44b5-b14a-d3cd59b12a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing activation mechanism via Mailslurp for previously created user autotest_07271330@deviq.io",
              "fullTitle": "Testing Users CRUD Testing activation mechanism via Mailslurp for previously created user autotest_07271330@deviq.io",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "df3bc177-8e40-413b-a3cf-3ef0d7aefce9",
              "parentUUID": "8267237e-003a-44b5-b14a-d3cd59b12a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletion of previously created user",
              "fullTitle": "Testing Users CRUD Deletion of previously created user",
              "timedOut": null,
              "duration": 6651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('PANGEA_BASE_URL')); //login form\ncy.loginUI(_user.usernameAdmin, _user.passwordAdmin);\ncy.server();\ncy.route('GET', \"/api/v1/User\").as('getUsers');\ncy.get('.app-header > .d-flex > :nth-child(1) > .w').should('contain.text', 'Admin').click();\ncy.viewport(1820, 968);\ncy.wait('@getUsers').then(function (xhr) {\n  //conseguir la fila que tenga \"email\n  cy.get('table').find('tr').contains(email).get('tr:nth-child(3) .w-100').click({\n    force: true\n  });\n  cy.get('.swal2-confirm').click();\n});",
              "err": {},
              "uuid": "e9903e3e-2c6e-4de2-bc45-ffd8d8ba733f",
              "parentUUID": "8267237e-003a-44b5-b14a-d3cd59b12a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Themes are properly filled on table",
              "fullTitle": "Testing Users CRUD Themes are properly filled on table",
              "timedOut": null,
              "duration": 8662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(Cypress.env('PANGEA_BASE_URL')); //login form\ncy.loginUI(_user.usernameAdmin, _user.passwordAdmin);\ncy.server();\ncy.route('GET', \"http://test.pangea.deviq.io/api/v1/Theme\").as('getThemes');\ncy.goToAdminPanel();\ncy.viewport(1800, 968);\ncy.get(':nth-child(3) > .ml-auto > div > .mb-0').contains('Themes').click(); //go to Themes view\ncy.wait('@getThemes').then(function (xhr) {\n  expect(xhr.responseBody).to.have.property('success').eq(true);\n  var themes = xhr.responseBody.themes;\n  console.log(themes);\n  themes.forEach(function (theme) {\n    cy.get('[aria-colcount=\"4\"]').find('tr').as('row');\n    cy.get('@row').contains(theme.nm);\n  });\n});",
              "err": {},
              "uuid": "aff6a895-91bb-4d1b-874d-5d6a2083a87f",
              "parentUUID": "8267237e-003a-44b5-b14a-d3cd59b12a3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fb2a44b-cde7-43b2-bb8a-15e797893306",
            "14de89ff-8888-4b4e-999c-c66f74304812",
            "e9903e3e-2c6e-4de2-bc45-ffd8d8ba733f",
            "aff6a895-91bb-4d1b-874d-5d6a2083a87f"
          ],
          "failures": [],
          "pending": [
            "df3bc177-8e40-413b-a3cf-3ef0d7aefce9"
          ],
          "skipped": [],
          "duration": 45636,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a45bf8c9-c2e8-4f73-8f9e-d2a968c3f5da",
      "title": "",
      "fullFile": "cypress/integration/e2e/Event.feature",
      "file": "cypress/integration/e2e/Event.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "738a6e07-efd9-468b-af90-34215a3b05a4",
          "title": "Events-Creation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create an Recurring Event with no end date and negative solar offset using Astrotime",
              "fullTitle": "Events-Creation Create an Recurring Event with no end date and negative solar offset using Astrotime",
              "timedOut": null,
              "duration": 25491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a34ed9b4-1535-4260-a377-e9b0862946e1",
              "parentUUID": "738a6e07-efd9-468b-af90-34215a3b05a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a34ed9b4-1535-4260-a377-e9b0862946e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25491,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0080165d-f5d6-4079-a131-f9364fe780ee",
      "title": "",
      "fullFile": "cypress/integration/e2e/Login.feature",
      "file": "cypress/integration/e2e/Login.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "93183987-e7b5-46a4-bfac-d37770256190",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Pangea Login Success",
              "fullTitle": "Login Pangea Login Success",
              "timedOut": null,
              "duration": 10288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ca2b64f9-5130-442e-b406-8f2438da4c46",
              "parentUUID": "93183987-e7b5-46a4-bfac-d37770256190",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Pangea Login With Bad Credentials",
              "fullTitle": "Login Pangea Login With Bad Credentials",
              "timedOut": null,
              "duration": 2756,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: If credentials are wrong the frontend should wait for a HTTP 401 (Unauthorized): expected 500 to equal 401",
                "estack": "AssertionError: If credentials are wrong the frontend should wait for a HTTP 401 (Unauthorized): expected 500 to equal 401\n    at Context.eval (http://test.pangea.deviq.io/__cypress/tests?p=cypress/integration/e2e/Login.feature:69:107)",
                "diff": "- 500\n+ 401\n"
              },
              "uuid": "4b9d81c3-9a47-4021-87f2-9b70de62b217",
              "parentUUID": "93183987-e7b5-46a4-bfac-d37770256190",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca2b64f9-5130-442e-b406-8f2438da4c46"
          ],
          "failures": [
            "4b9d81c3-9a47-4021-87f2-9b70de62b217"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13044,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.1.0"
    }
  }
}